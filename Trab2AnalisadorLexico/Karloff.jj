PARSER_BEGIN(Karloff)
import java.io.*;
public class Karloff {

  public static void main(String args[]) throws ParseException,IOException {
    
 Karloff analisador = new Karloff(new FileInputStream(args[0]));
 analisador.Karloff();
  }

}

PARSER_END(Karloff)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <VOID: "void">
| <FUNC: "func">
| <IF: "if">
| <THEN: "then">
| <REPEAT: "repeat">
| <UNTIL: "until">
| <WHILE: "while">
| <RETURN: "return">

| <SYSOUT: "System.output">
| <SYSREAD: "System.readint">

| <NEWVAR: "newVar">
| <INT: "integer">
| <BOOL: "bool">
| <TRUE: "true">
| <FALSE: "false">

| <ACHAVES: "{">
| <FCHAVES: "}">
| <APARENT: "(">
| <FPARENT: ")">
| <PONTOVIRG: ";">
| <VIRGULA: ",">

| <ATRIB: "=">

| <SOMA: "+">
| <SUBTR: "-">
| <MULT: "*">
| <DIV: "/">
| <AND: "&">
| <OR: "|">
| <MENORQUE: "<">
| <MAIORQUE: ">">
| <IGUAL: "==">

}

TOKEN :
{
  <NUM : (["0"-"9"])+ ((["."]) (["0"-"9"])+)? (["E"] (["+", "-"])? (["0"-"9"])+)?>
| <ID: ["a"-"z","A"-"Z"] (["a"-"z","A"-"Z","0"-"9"])* (["_"] (["a"-"z", "A"-"Z","0"-"9"])+)*>

}

void Karloff () :
{Token t;}
{

(
  <MAIN> { System.out.println("Palavra reservada: main");}
| <VOID> { System.out.println("Palavra reservada: void");}
| <FUNC> { System.out.println("Palavra reservada: func");}
| <IF> { System.out.println("Palavra reservada: if");}
| <THEN> { System.out.println("Palavra reservada: then");}
| <REPEAT> { System.out.println("Palavra reservada: repeat");}
| <UNTIL> { System.out.println("Palavra reservada: until");}
| <WHILE> { System.out.println("Palavra reservada: while");}
| <RETURN> { System.out.println("Palavra reservada: return");}

| <SYSOUT> { System.out.println("Palavra reservada: System.output");}
| <SYSREAD> { System.out.println("Palavra reservada: System.readint");}

| <NEWVAR> {System.out.println("Palavra reservada: newVar");}
| <INT> { System.out.println("Palavra reservada: integer");}
| <BOOL> { System.out.println("Palavra reservada: bool");}
| <TRUE> { System.out.println("Palavra reservada: true");}
| <FALSE> { System.out.println("Palavra reservada: false");}

| <ACHAVES> { System.out.println("Abre chaves: {");}
| <FCHAVES> { System.out.println("Fecha chaves: }");}
| <APARENT> { System.out.println("Abre parenteses: (");}
| <FPARENT> { System.out.println("Fecha parenteses: )");}
| <PONTOVIRG> { System.out.println("Ponto e vírgula: ;");}
| <VIRGULA> { System.out.println("Vírgula: ,");}

| <ATRIB> { System.out.println("Atribuição: =");}

| <SOMA> { System.out.println("Soma: +");}
| <SUBTR> { System.out.println("Subtração: -");}
| <MULT> { System.out.println("Multiplicação: *");}
| <DIV> { System.out.println("Divisão: /");}
| <IGUAL> { System.out.println("Igual: ==");}
| <MAIORQUE> { System.out.println("Menor que: <");}
| <MENORQUE> { System.out.println("Maior que: >");}
| <AND> { System.out.println("E: &");}
| <OR> { System.out.println("OU: |");}

| t=<NUM> { System.out.println("Número: "+ t.image);}
| t=<ID> { System.out.println("Identificador: "+ t.image);}
)*
<EOF> 

}