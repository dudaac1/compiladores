PARSER_BEGIN(Karloff)
import java.io.*;
import java.util.ArrayList;

class Tipo {
  String tipo;

  Tipo(String tipo) {
    this.tipo = tipo;
  }

  @Override
  public String toString() {
    String t;
    if (tipo == "integer")
      t = "int";
    else
      t = "int";
    return t;
  }
}

class Variavel {
  Tipo tipo;
  String nome;

  Variavel(Tipo tipo, String nome) {
    this.tipo = tipo;
    this.nome = nome;
  }

  @Override
  public String toString() {
    // return "newVar " + tipo.toString() + " " + nome + ";\n";
    return tipo.toString() + " " + nome + ";\n";
  }
}

class Operador {
  String operador;

  Operador(String operador) {
    this.operador = operador;
  }

  @Override
  public String toString() {
    return operador;
  }
}

class Expressao {  }

class Comando {  }

class If extends Comando {
  Expressao exp;
  ArrayList<Comando> comandos;

  If(Expressao exp, ArrayList<Comando> comandos) {
    this.exp = exp;
    this.comandos = comandos;
  }

  @Override
  public String toString() {
    String com = "";
    for (Comando c : comandos) 
      com = com.concat(c.toString());
    // return "if (" + exp.toString() + ") then {\n" + com + "};\n";
    return "if (" + exp.toString() + ") {\n" + com + "}\n";
  }
}

class While extends Comando {
  Expressao exp;
  ArrayList<Comando> comandos;

  While(Expressao exp, ArrayList<Comando> comandos) {
    this.exp = exp;
    this.comandos = comandos;
  }

  @Override
  public String toString() {
    String com = "";
    for (Comando c: comandos)
      com = com.concat(c.toString());
    return "while (" + exp.toString() + ") {\n" + com + "}\n";
  }
}

class Repeat extends Comando {
  ArrayList<Comando> comandos;
  Expressao exp;

  Repeat(ArrayList<Comando> comandos, Expressao exp) {
    this.comandos = comandos;
    this.exp = exp;
  }

  @Override
  public String toString() {
    String com = "";
    for (Comando c : comandos) 
      com = com.concat(c.toString());
    // return "repeat {\n" + com + "} until (" + exp.toString() + ");\n";
    return "do {\n" + com + "} while (" + exp.toString() + ");\n";
  }
}

class Return extends Comando {
  Expressao exp;

  Return(Expressao exp) {
    this.exp = exp;
  }

  @Override
  public String toString() {
    return "return " + exp.toString() + ";\n";
  }
}

class SystemOut extends Comando {
  Expressao exp;

  SystemOut(Expressao exp) {
    this.exp = exp;
  }

  @Override
  public String toString() {
    // return "System.output(" + exp.toString() + ");\n";
    return "printf(\"%d\", " + exp.toString() + ");\n";
  }
}

class Operacao extends Expressao {
  Expressao exp1;
  Operador op;
  Expressao exp2;

  Operacao(Expressao exp1, Operador op, Expressao exp2) {
    this.exp1 = exp1;
    this.op = op;
    this.exp2 = exp2;
  }

  @Override
  public String toString() {
    // return "(" + exp1 + op.toString()+ exp2 + ")";
    return exp1 + " " + op.toString() +  " " + exp2;
  }
}

class ChamadaFuncao extends Fator { 
  String id;
  ArrayList<Expressao> exps;

  ChamadaFuncao(String id, ArrayList<Expressao> exps) {
    this.id = id;
    this.exps = exps;
  }

  @Override
  public String toString() {
    String expressoes = exps.get(0).toString();
    for (int i = 1; i < exps.size(); i++)
      expressoes = expressoes.concat(", " + exps.get(i).toString());
    return id + "("+ expressoes + ")";
  }
}

class ComandoChamaFuncao extends Comando {
  ChamadaFuncao chamada;

  ComandoChamaFuncao(ChamadaFuncao chamada) {
    this.chamada = chamada;
  }

  @Override
  public String toString() {
    return chamada.toString();
  }
}

class AtribId extends Comando {
  String id;
}

class AtribExp extends AtribId {
  Expressao exp;

  AtribExp(String id, Expressao exp) {
    this.id = id;
    this.exp = exp;
  }

  @Override
  public String toString() {
    return "" + id + " = " + exp.toString() + ";\n";
  }
}

class AtribRead extends AtribId {
  AtribRead(String id) {
    this.id = id;
  }

  @Override
  public String toString() {
    // return "" + id + " = " + "System.readint();\n";
    return id + "= scanf();\n";
  }
}

class Fator extends Expressao { }

class FatorListaExp extends Fator {
  String id;
  ArrayList<Expressao> exps; 

  FatorListaExp(String id, ArrayList<Expressao> exps) {
    this.id = id;
    this.exps = exps;
  }

  @Override 
  public String toString() {
    return id + "(" + exps.toString() + ");";
  }
}

class FatorNum extends Fator {
  String num;

  FatorNum(String num) {
    this.num = num;
  }

  @Override 
  public String toString() {
    return num;
  }
}

class FatorTrue extends Fator {
  @Override
  public String toString() {
    // return "true";
    return "1";
  }
}

class FatorFalse extends Fator {
  @Override
  public String toString() {
    // return "false";
    return "0";
  }
}

class FatorVar extends Fator {
  String id;

  FatorVar(String id) {
    this.id = id;
  }

  @Override
  public String toString() {
    return id;
  }
}

class ExpressaoFator extends Expressao {
  Fator fator;

  ExpressaoFator(Fator fator) {
    this.fator = fator;
  }

  @Override
  public String toString() {
    return fator.toString();
  }
}

class Argumento {
  Tipo tipo;
  String id;

  Argumento(Tipo tipo, String id) {
    this.tipo = tipo;
    this.id = id;
  }

  @Override
  public String toString() {
    return tipo.toString() + " " + id;
  }
}

class Funcao {
  Tipo tipo;
  String id;
  ArrayList<Argumento> args;
  ArrayList<Variavel> variaveis;
  ArrayList<Comando> seq_comandos;

  Funcao(Tipo tipo, String id, ArrayList<Argumento> args, ArrayList<Variavel> vars, ArrayList<Comando> comandos) {
    this.tipo = tipo;
    this.id = id;
    this.args = args;
    this.variaveis = vars;
    this.seq_comandos = comandos;
  }

  @Override
  public String toString() {
    String argumentos = args.get(0).toString();
    for (int i = 1; i < args.size(); i++)
      argumentos = argumentos.concat(", " + args.get(i).toString());

    String vars = "";
    for (Variavel v : variaveis) 
      vars = vars.concat(v.toString());

    String comandos = "";
    for (Comando c : seq_comandos) 
      comandos = comandos.concat(c.toString());

    // return "\n\nfunc " + tipo.toString() + " " + id + "(" + argumentos + ") {\n" + vars + comandos + "}";
    return "\n\n" + tipo.toString() + " " + id + "(" + argumentos + ") {\n" + vars + comandos + "}";
  }
}

class Main {
  ArrayList<Variavel> variaveis;
  ArrayList<Comando> seq_comandos;

  Main(ArrayList<Variavel> vars, ArrayList<Comando> comandos) {
    this.variaveis = vars;
    this.seq_comandos = comandos;
  }

  @Override
  public String toString() {
    String vars = "";
    for (Variavel v : variaveis) 
      vars = vars.concat(v.toString());
    String comandos = "";
    for (Comando c : seq_comandos) 
      comandos = comandos.concat(c.toString());
    
    return "int main () {\n" + vars + comandos + "return 0;\n}";
  }

  public String getBiblio() {
    return "#include <stdio.h>\n#include <stdlib.h>\n";
  }
}

class ArvoreKarloff {
  Main principal;
  ArrayList<Funcao> funcoes;

  ArvoreKarloff(Main principal, ArrayList<Funcao> funcoes) {
    this.principal = principal;
    this.funcoes = funcoes;
  }

  @Override
  public String toString() {
    String biblio = principal.getBiblio();
    String funcs = "";
    for (Funcao f : funcoes) 
      funcs = funcs.concat(f.toString() + "\n");
    return biblio + funcs + "\n" +principal.toString();
  }
}

public class Karloff {
  public static void main(String args[]) throws Exception {  
    FileInputStream file = new FileInputStream(new File(args[0]));
    Karloff analisador = new Karloff(file);
    ArvoreKarloff arvore = analisador.Karloff();
    gerarCodigo(arvore, args[0]);
  }
  
  // deve gerar um arquivo .java (ou outra linguagem) 
  // com o mesmo nome do arquivo de entrada
  public static void gerarCodigo(ArvoreKarloff arvore, String caminho) throws Exception {
    String arvore_string = arvore.toString();
    caminho = caminho.replace(".kar", ".c");
    System.out.println(arvore_string);
    File arquivo = new File("saida/" + caminho);
    arquivo.createNewFile();
    FileOutputStream saida = new FileOutputStream(arquivo);
    // saida.write(arvore_string);
    saida.write(arvore_string.getBytes());
  }
}

PARSER_END(Karloff)

SKIP :
{
    " "
  | "\t"
  | "\n"
  | "\r"
}

TOKEN :
{
    <MAIN: "main">
  | <VOID: "void">
  | <FUNC: "func">
  | <IF: "if">
  | <THEN: "then">
  | <REPEAT: "repeat">
  | <UNTIL: "until">
  | <WHILE: "while">
  | <RETURN: "return">

  | <SYSOUT: "System.output">
  | <SYSREAD: "System.readint">

  | <NEWVAR: "newVar">
  | <INT: "integer">
  | <BOOL: "bool">
  | <TRUE: "true">
  | <FALSE: "false">

  | <ACHAVES: "{">
  | <FCHAVES: "}">
  | <APARENT: "(">
  | <FPARENT: ")">
  | <PONTOVIRG: ";">
  | <VIRGULA: ",">

  | <ATRIB: "=">

  | <SOMA: "+">
  | <SUBTR: "-">
  | <MULT: "*">
  | <DIV: "/">
  | <AND: "&">
  | <OR: "|">
  | <MENORQUE: "<">
  | <MAIORQUE: ">">
  | <IGUAL: "==">
}

TOKEN :
{
    <NUM : (["0"-"9"])+ ((["."]) (["0"-"9"])+)? (["E"] (["+", "-"])? (["0"-"9"])+)?>
  | <ID: ["a"-"z","A"-"Z"] (["a"-"z","A"-"Z","0"-"9"])* (["_"] (["a"-"z", "A"-"Z","0"-"9"])+)*>
}

// KARLOFF -> MAIN FUNC?
ArvoreKarloff Karloff () : {
  Main principal = null;
  ArrayList<Funcao> funcoes = new ArrayList();
} {
  (
    principal = Main() 
    [Func(funcoes)]//?
    <EOF>
  )
  { return new ArvoreKarloff(principal, funcoes); }
}

// MAIN -> "void" "main" "(" ")" "{" VARDECL SEQCOMANDOS "}"
Main Main () : {
  ArrayList<Variavel> variaveis = new ArrayList();
  ArrayList<Comando> comandos = new ArrayList();
} {
  <VOID> 
  <MAIN> 
  <APARENT> 
  <FPARENT>
  <ACHAVES>
  VarDecl(variaveis)
  SeqComandos(comandos)
  <FCHAVES>

  { return new Main(variaveis, comandos); }
}

// // VARDECL -> "newVar" TIPO TOKEN_id ";" VARDECL | vazio
void VarDecl (ArrayList<Variavel> variaveis) : {
  Tipo tipo = null;
  Token id = null;
} {
  (
    <NEWVAR>
    tipo = Tipo()
    id = <ID>
    <PONTOVIRG>
    { variaveis.add(new Variavel(tipo, id.image)); }
    [VarDecl(variaveis)]
  )//?
}

// TIPO -> "integer" | "bool"
Tipo Tipo () : {} {
  (
    <INT> 
    { return new Tipo("integer"); }
  )
  | 
  (
    <BOOL>
    { return new Tipo("bool"); }
  )
}

// // SEQCOMANDOS -> COMANDO SEQCOMANDOS | vazio
void SeqComandos (ArrayList<Comando> comandos) : {
  Comando c = null;
} {
  (
    c = Comando()
    { 
      comandos.add(c); 
      // System.out.println(c);
    }
    [SeqComandos(comandos)]
  )//?
}

// COMANDO -> TOKEN_id COMANDO'
//    | "if" "(" EXP ")" "then" "{" SEQCOMANDOS "}" ";"
//    | "while" "(" EXP ")" "{" SEQCOMANDOS "}" ";"
//    | "repeat" "{" SEQCOMANDOS "}" "until" "(" EXP ")" ";"
//    | "return" EXP ";" 
//    | "System.output" "(" EXP ")" ";"
Comando Comando () : {
  Token id = null;
  Comando c = null;
  Expressao exp = null;
  ArrayList<Comando> comandos = new ArrayList();
} {
  (
    id = <ID> 
    c = ComandoLinha1(id.image)
    { return c; }
  ) | (
    <IF> 
    <APARENT> 
    exp = Exp() 
    <FPARENT> 
    <THEN> 
    <ACHAVES> 
    SeqComandos(comandos) 
    <FCHAVES> 
    <PONTOVIRG>
    { return new If(exp, comandos); }
  ) | (
    <WHILE> 
    <APARENT> 
    exp = Exp() 
    <FPARENT> 
    <ACHAVES> 
    SeqComandos(comandos) 
    <FCHAVES> 
    <PONTOVIRG>
    { return new While(exp, comandos); }
  ) | (
    <REPEAT>
    <ACHAVES>
    SeqComandos(comandos)
    <FCHAVES> 
    <UNTIL> 
    <APARENT> 
    exp = Exp() 
    <FPARENT> 
    <PONTOVIRG>
    { return new Repeat(comandos, exp); }
  ) | (
    <RETURN> 
    exp = Exp() 
    <PONTOVIRG>
    { return new Return(exp); }
  ) | (
    <SYSOUT> 
    <APARENT> 
    exp = Exp() 
    <FPARENT> 
    <PONTOVIRG>
    { return new SystemOut(exp); }
  )

  // { return result; }
}

// COMANDO' -> "(" LISTAEXP? ")" ";" | "=" COMANDO''
Comando ComandoLinha1(String id) : {
  Comando c = null;
  ArrayList<Expressao> exps = new ArrayList();
} {
  (
    <APARENT> 
    (ListaExp(exps))? 
    <FPARENT> 
    <PONTOVIRG>
    { 
      c = new ComandoChamaFuncao(new ChamadaFuncao(id, exps)); 
      return c;
    }
  ) | (
    <ATRIB> 
    c = ComandoLinha2(id)
    { return c; }
  )

  // { return result; }
}

// COMANDO'' -> EXP ";" | "System.readint" "(" ")" ";"
Comando ComandoLinha2(String id) : {
  Expressao exp = null;
  // Comando result = null;
} {
   (
    exp = Exp() 
    <PONTOVIRG>
    { return new AtribExp(id, exp); }
  ) | (
    <SYSREAD> 
    <APARENT> 
    <FPARENT> 
    <PONTOVIRG>
    { return new AtribRead(id); }
  )

  // { return result; }
}

// OP -> "+" | "-" | "*" | "/" | "&" | "|" | "<" | ">" | "=="
Operador Op () : {
  Token op;
  Operador result = null;
 } {
  (
    op = <SOMA> | 
    op = <SUBTR> | 
    op = <MULT> | 
    op = <DIV> | 
    op = <AND> | 
    op = <OR> | 
    op = <MENORQUE> | 
    op = <MAIORQUE> | 
    op = <IGUAL>
  )
  { 
    result = new Operador(op.image); 
    return result;
  }
}

// EXP -> "(" EXP OP EXP ")" | FATOR
Expressao Exp () : {
  Expressao exp1, exp2;
  Operador op;
  Fator f;
} {
  (
    <APARENT> 
    exp1 = Exp() 
    op = Op() 
    exp2 = Exp() 
    <FPARENT>
    { return new Operacao(exp1, op, exp2); }
  ) | (
    f = Fator()
    { return new ExpressaoFator(f); }
  )

  // { return result; }
}

// FATOR -> TOKEN_id FATOR' | TOKEN_numliteral | "true" | "false
Fator Fator () : {
  Token t;
  ArrayList<Expressao> exps = new ArrayList();
} {
  (
    t = <ID> 
    [
      <APARENT> 
      (ListaExp(exps))? 
      <FPARENT>
      { return new ChamadaFuncao(t.image, exps); }
    ]
    { return new FatorVar(t.image); }

    // FatorLinha(t.image, exps)
  ) | (
    t = <NUM> 
    { return new FatorNum(t.image); }
  ) | (
    t = <TRUE> 
    { return new FatorTrue(); }
  ) | (
    t = <FALSE>
    { return new FatorFalse(); }
  )
}

// FATOR' -> "(" LISTAEXP? ")" | vazio
// void FatorLinha (String id, ArrayList<Expressao> exps) : {} {
//   (
//     <APARENT> 
//     (ListaExp(exps))? 
//     <FPARENT>
//     { exps.add(new FatorListaExp(id, exps)); }
//   )?
// }


// LISTAEXP -> EXP LISTAEXP' 
void ListaExp (ArrayList<Expressao> exps) : {
  Expressao exp;
} {
  exp = Exp() 
  { exps.add(exp); }
  [ListaExpLinha(exps)]
}

// LISTAEXP' -> "," EXP LISTAEXP' | vazio
void ListaExpLinha (ArrayList<Expressao> exps) : {
  Expressao exp;
} {
  (
    <VIRGULA> 
    exp = Exp() 
    { exps.add(exp); }
    [ListaExpLinha(exps)]
  )//?
}

// // FUNC -> "func" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}" FUNC'
void Func (ArrayList<Funcao> funcoes) : {
  Tipo tipo;
  Token id;
  ArrayList<Variavel> variaveis = new ArrayList();
  ArrayList<Comando> comandos = new ArrayList();
  ArrayList<Argumento> args = new ArrayList();
  Funcao funcao = null;
} {
  <FUNC> 
  tipo = Tipo() 
  id = <ID> 
  <APARENT> 
  [ListaArg(args)]//? 
  <FPARENT> 
  <ACHAVES> 
  [VarDecl(variaveis)]
  SeqComandos(comandos) 
  { 
    funcao = new Funcao(tipo, id.image, args, variaveis, comandos);
    funcoes.add(funcao);
  }
  <FCHAVES> 
  FuncLinha(funcoes)
}

// FUNC' -> "func" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}" FUNC' | vazio
void FuncLinha (ArrayList<Funcao> funcoes) : {
  Tipo tipo;
  Token id;
  ArrayList<Variavel> variaveis = new ArrayList();
  ArrayList<Comando> comandos = new ArrayList();
  ArrayList<Argumento> args = new ArrayList();
  Funcao funcao = null;
} {
  (
    <FUNC> 
    tipo = Tipo() 
    id = <ID> 
    <APARENT> 
    (ListaArg(args))? 
    <FPARENT> 
    <ACHAVES> 
    VarDecl(variaveis) 
    SeqComandos(comandos)
    { 
      funcao = new Funcao(tipo, id.image, args, variaveis, comandos);
      funcoes.add(funcao);
    } 
    <FCHAVES> 
    FuncLinha(funcoes)
  )?
}

// LISTAARG -> TIPO TOKEN_id LISTAARG'
void ListaArg (ArrayList<Argumento> args) : {
  Argumento arg;
  Tipo tipo;
  Token id;
} {
  tipo = Tipo() 
  id = <ID> 
  { args.add(new Argumento(tipo, id.image)); }
  ListaArgLinha(args)
}

// LISTAARG' -> "," TIPO TOKEN_id LISTAARG' | vazio
void ListaArgLinha (ArrayList<Argumento> args) : {
  Tipo tipo;
  Token id;
} {
  (
    <VIRGULA> 
    tipo = Tipo() 
    id = <ID> 
    { args.add(new Argumento(tipo, id.image)); }
    ListaArgLinha(args)
  )?
}