PARSER_BEGIN(Karloff)
import java.io.*;
import java.util.ArrayList;

public class Karloff {

  public static void main(String args[]) throws Exception {  
    FileInputStream file = new FileInputStream(new File(args[0]));
    Karloff analisador = new Karloff(file);
    ArvoreKarloff arvore = analisador.Karloff();
    gerarCodigo(arvore, args[0]);
  }

    // deve gerar um arquivo .java (ou outra linguagem) 
    // com o mesmo nome do arquivo de entrada
  public static void gerarCodigo(ArvoreKarloff arvore, String arquivo) {
    // ???
  }

  // KARLOFF -> MAIN FUNC?
  class ArvoreKarloff {
    Main principal;
    ArrayList<Func> funcoes;

    ArvoreKarloff(Main principal, ArrayList<Func> funcoes) {
      this.principal = principal;
      this.funcoes = funcoes;
    }

    @Override
    public String toString() {
      String funcoes = "";
      for (Func f : this.funcoes)
        funcoes += f.toString();
      return principal.toString() + funcoes;
    }
  }
    
  // MAIN -> "void" "main" "(" ")" "{" VARDECL SEQCOMANDOS "}"
  class Main {
    VarDecl variaveis;
    SeqComandos comandos;

    Main(VarDecl variaveis, SeqComandos comandos) {
      this.variaveis = variaveis;
      this.comandos = comandos;
    }

    @Override
    public String toString() {
      return "void main () {" + variaveis.toString() + comandos.toString() + "}";
    }
  }

  class Variavel {
    Tipo tipo;
    String nome;

    Variavel(Tipo tipo, String nome) {
      this.tipo = tipo;
      this.nome = nome;
    }

    @Override
    public String toString() {
      return "newVar" + tipo.toString() + id + ";";
    }
  }

  // VARDECL -> "newVar" TIPO TOKEN_id ";" VARDECL | vazio
  class VarDecl {
    ArrayList<Variavel> variaveis;

    VarDecl(ArrayList<Variavel> variaveis) {
      this.variaveis = variaveis;
    }

    @Override
    public String toString() {
      String variaveis = variaveis.get(0).toString(); 
      int i;
      for (i = 1; i < variaveis.size(); ++i) 
        variaveis += variaveis.get(i).toString();
      return variaveis;
    }
  }

  // TIPO -> "integer" | "bool"
  class Tipo {
    String tipo;

    Tipo(String tipo) {
      this.tipo = tipo;
    }

    @Override
    public String toString() {
      return tipo;
    }
  }

  // SEQCOMANDOS -> COMANDO SEQCOMANDOS | vazio
  class SeqComandos {
    ArrayList<Comando> comandos;

    SeqComandos(ArrayList<Comando> comandos) {
      this.comandos = comandos;
    }

    @Override
    public String toString() {
      String comandos = "";
      for (Comando c : this.comandos)
        comandos += c.toString() + "";
      return comandos;
    }
  }
  
  class Comando {  }

  // "if" "(" EXP ")" "then" "{" SEQCOMANDOS "}" ";"
  class If extends Comando {
    Expressao exp;
    SeqComandos comandos;

    If(Expressao exp, SeqComandos comandos) {
      this.exp = exp;
      this.comandos = comandos;
    }

    @Override
    public String toString() {
      return "if (" + exp.toString + ") then {" + comandos.toString() + "};";
    }
  }
  
  // "while" "(" EXP ")" "{" SEQCOMANDOS "}" ";"
  class While extends Comando {
    Expressao exp;
    SeqComandos comandos;

    While(Expressao exp, SeqComandos comandos) {
      this.exp = exp;
      this.comandos = comandos;
    }

    @Override
    public String toString() {
      return "while (" + exp.toString() + ") {" + comandos.toString() + "};";
    }
  }
  
  // "repeat" "{" SEQCOMANDOS "}" "until" "(" EXP ")" ";"
  class Repeat extends Comando {
    SeqComandos comandos;
    Expressao exp;

    Repeat(SeqComandos comandos, Expressao exp) {
      this.comandos = comandos;
      this.exp = exp;
    }

    @Override
    public String toString() {
      return "repeat {" + comandos.toString() + "} until (" + exp.toString() + ");";
    }
  }
  
  // "return" EXP ";" 
  class Return extends Comando {
    Expressao exp;

    Return(Expressao exp) {
      this.exp = exp;
    }

    @Override
    public String toString() {
      return "return " + exp.toString() + ";";
    }
  }
  
  // "System.output" "(" EXP ")" ";"
  class SystemOut extends Comando {
    Expressao exp;

    SystemOut(Expressao exp) {
      this.exp = exp;
    }

    @Override
    public String toString() {
      return "System.output(" + exp.toString() + ");";
    }
  }

  // COMANDO -> TOKEN_id COMANDO'
  class ComandoId extends Comando {
    String id;
  }
  
  // COMANDO -> TOKEN_id COMANDO'
  // COMANDO' -> "(" LISTAEXP? ")" ";" 
  class IdListaExp extends ComandoId { 
    ListaExpressao exps;

    IdListaExp(String id, ListaExpressao exps) {
      this.id = id;
      this.exps = exps;
    }

    @Override
    public String toString() {
      return id + exps.toString();
    }
  }

  // COMANDO -> TOKEN_id COMANDO'
  // COMANDO' -> "=" COMANDO''  
  // COMANDO'' -> EXP ";" 
  class AtribExp extends ComandoId {
    Expressao exp;

    AtribExp(String id, Expressao exp) {
      this.id = id;
      this.exp = exp;
    }

    @Override
    public String toString() {
      return "" + id + " = " + exp.toString();
    }
  }

  // COMANDO -> TOKEN_id COMANDO'
  // COMANDO' -> "=" COMANDO2
  // COMANDO'' -> "System.readint" "(" ")" ";" 
  class AtribRead extends ComandoId {
    AtribRead(String id) {
      this.id = id;
    }

    @Override
    public String toString() {
      return "" + id + " = " + "System.readint();";
    }
  }
  
  class Expressao {  }

  // EXP -> "(" EXP OP EXP ")" 
  class Operacao extends Expressao {
    Expressao exp1;
    Operador op;
    Expressao exp2;

    Operacao(Expressao exp1, Operador op, Expressao exp2) {
      this.exp1 = exp1;
      this.op = op;
      this.exp2 = exp2;
    }

    @Override
    public String toString() {
      return "(" + exp1 + op.toString + exp2 + ")";
    }
  }
  
  // EXP -> FATOR
  // FATOR -> TOKEN_id FATOR'
  // FATOR' -> "(" LISTAEXP? ")"
  class FatorListaExp extends Expressao {
    String id;
    ListaExpressao exps; // desse jeito ta errada, obrigada a ter um Exp

    FatorListaExp(String id, ListaExpressao exps) {
      this.id = id;
      this.exps = exps;
    }

    @Override 
    public String toString() {
      return id + " (" + exps.toString() + ")";
    }
  }
  
  // EXP -> FATOR
  // FATOR -> TOKEN_id FATOR'
  // FATOR' -> vazio
  // ???

  // EXP -> FATOR
  // FATOR -> TOKEN_numliteral
  class FatorNum extends Expressao {
    Double num;

    FatorNum(Double num) {
      this.num = num;
    }

    @Override 
    public String toString() {
      return Integer.valueOf(num);
    }
  }

  // EXP -> FATOR
  // FATOR -> "true"
  class True extends Expressao {
    @Override
    public String toString() {
      return "true";
    }
  }

  // EXP -> FATOR
  // FATOR -> "false"
  class False extends Expressao {
    @Override
    public String toString() {
      return "false";
    }
  }

  // OP -> "+" | "-" | "*" | "/" | "&" | "|" | "<" | ">" | "=="
  class Operador {
    String operador;

    Operador(String operador) {
      this.operador = operador;
    }

    @Override
    public String toString() {
      return operador;
    }
  }
  
  // LISTAEXP -> EXP LISTAEXP' 
  // LISTAEXP' -> "," EXP LISTAEXP'
  class ListaExp {
    ArrayList<Expressao> exps;

    ListaExp(ArrayList<Expressao> exps) {
      this.exps = exps;
    }

    @Override
    public String toString() {
      if (exps.size() > 0) {
        String exps = exps.get(0).toString(); // exp listaexp' e listaexp' -> vazio
        int i;
        for (i = 1; i < exps.size(); ++i) // listaexp' -> exp listaexp'
          exps += ", " + exps.get(i).toString();
        return exps;
      }
      return ""; // listaexp?
    }
  }
  
  // FUNC -> "func" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}" FUNC'
  // FUNC' -> "func" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}" FUNC'
  class Funcao {
    Tipo tipo;
    String id;
    ListaArg lista_arg;
    VarDecl variaveis;
    SeqComandos comandos;

    Funcao(Tipo tipo, String id, ListaArg lista_arg, VarDecl variaveis, SeqComandos comandos) {
      this.tipo = tipo;
      this.id = id;
      this.lista_arg = lista_arg;
      this.variaveis = variaveis;
      this.comandos = comandos;
    }

    @Override
    public String toString() {
      return "func " + tipo.toString() + id + "(" + lista_arg.toString() + ") {\n" + variaveis.toString() + comandos.toString() + "\n}\n";
    }
  }
  
  // FUNC' -> "func" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}" FUNC' | vazio
  class Funcoes {
    ArrayList<Funcao> funcoes;

    Funcoes(ArrayList<Funcao> funcoes) {
      this.funcoes = funcoes;
    }

    @Override
    public String toString() {
      String funcoes = "";
      for (Funcao f : this.funcoes)
        funcoes += f.toString() + "";
      return funcoes;
    }
  }

  // TIPO TOKEN_id
  class Argumento {
    Tipo tipo;
    String id;

    Argumento(Tipo tipo, String id) {
      this.tipo = tipo;
      this.id = id;
    }

    @Override
    public String toString() {
      return tipo.toString + id;
    }
  }
  
  // LISTAARG -> TIPO TOKEN_id LISTAARG'
  // LISTAARG' -> "," TIPO TOKEN_id LISTAARG'
  class ListaArg {
    ArrayList<Argumento> args;

    ListaArg(ArrayList<Argumento> args) {
      this.args = args;
    }

    @Override
    public String toString() {
      if (args.size() > 0) {
        String args = args.get(0).toString(); // arg listaarg' e listaarg' -> vazio
        int i;
        for (i = 1; i < args.size(); ++i) // listaarg' -> arg listaarg'
          args += ", " + args.get(i).toString();
        return args;
      }
      return ""; // listaarg?
    }
  }

}

PARSER_END(Karloff)

SKIP :
{
    " "
  | "\t"
  | "\n"
  | "\r"
}

TOKEN :
{
    <MAIN: "main">
  | <VOID: "void">
  | <FUNC: "func">
  | <IF: "if">
  | <THEN: "then">
  | <REPEAT: "repeat">
  | <UNTIL: "until">
  | <WHILE: "while">
  | <RETURN: "return">

  | <SYSOUT: "System.output">
  | <SYSREAD: "System.readint">

  | <NEWVAR: "newVar">
  | <INT: "integer">
  | <BOOL: "bool">
  | <TRUE: "true">
  | <FALSE: "false">

  | <ACHAVES: "{">
  | <FCHAVES: "}">
  | <APARENT: "(">
  | <FPARENT: ")">
  | <PONTOVIRG: ";">
  | <VIRGULA: ",">

  | <ATRIB: "=">

  | <SOMA: "+">
  | <SUBTR: "-">
  | <MULT: "*">
  | <DIV: "/">
  | <AND: "&">
  | <OR: "|">
  | <MENORQUE: "<">
  | <MAIORQUE: ">">
  | <IGUAL: "==">
}

TOKEN :
{
    <NUM : (["0"-"9"])+ ((["."]) (["0"-"9"])+)? (["E"] (["+", "-"])? (["0"-"9"])+)?>
  | <ID: ["a"-"z","A"-"Z"] (["a"-"z","A"-"Z","0"-"9"])* (["_"] (["a"-"z", "A"-"Z","0"-"9"])+)*>
}

// KARLOFF -> MAIN FUNC?
ArvoreKarloff Karloff () : {
  Main principal = null;
  ArrayList<Funcao> funcoes = new ArrayList();
} {
  (
    principal = Main() 
    (Func(funcoes))?
  )
  { return new ArvoreKarloff(principal, funcoes); }
}

// MAIN -> "void" "main" "(" ")" "{" VARDECL SEQCOMANDOS "}"
main Main () : {
  ArrayList<Variavel> variaveis = null;
  ArrayList<Comando> comandos = null;
} {
  <VOID> 
  <MAIN> 
  <APARENT> 
  <FPARENT>
  <ACHAVES>
  VarDecl(variaveis)
  SeqComandos(comandos)
  <FCHAVES>

  { return new Main(variaveis, comandos); }
}

// VARDECL -> "newVar" TIPO TOKEN_id ";" VARDECL | vazio
ArrayList<Variavel> VarDecl (ArrayList<Variavel> variaveis) : {
  Tipo tipo;
  Token id;
  Variavel var;
} {
  (
    <NEWVAR>
    tipo = Tipo()
    id = <ID>
    <PONTOVIRG>
    { 
      variaveis.add(new Variavel(tipo, id.image())); 
      return variaveis;
    }
    // VarDecl(variaveis)
  )?
}

// TIPO -> "integer" | "bool"
Tipo Tipo () : {} {
  (
    <INT> 
    { return new Tipo("integer"); }
  )
  | 
  (
    <BOOL>
    { return new Tipo("bool"); }
  )
}

// SEQCOMANDOS -> COMANDO SEQCOMANDOS | vazio
void SeqComandos (ArrayList<Comando> comandos) : {
  Comando c = null;
} {
  (
    c = Comando()
    { comandos.add(c); }
    SeqComandos(comandos)
  )?
}

// COMANDO -> TOKEN_id COMANDO'
//    | "if" "(" EXP ")" "then" "{" SEQCOMANDOS "}" ";"
//    | "while" "(" EXP ")" "{" SEQCOMANDOS "}" ";"
//    | "repeat" "{" SEQCOMANDOS "}" "until" "(" EXP ")" ";"
//    | "return" EXP ";" 
//    | "System.output" "(" EXP ")" ";"
void Comando (ArrayList<Comando> comandos, ArrayList<Exp> lista_exp) : {
  Token id = null;
  Comando c = null;
  Expressao exp = null;
} {
  (
    id = <ID> 
    c = ComandoLinha1(id, lista_exp)
  ) | (
    <IF> 
    <APARENT> 
    exp = Expressao() 
    <FPARENT> 
    <THEN> 
    <ACHAVES> 
    SeqComandos(comandos) 
    <FCHAVES> 
    <PONTOVIRG>
  ) | (
    <WHILE> 
    <APARENT> 
    exp = Expressao() 
    <FPARENT> 
    <ACHAVES> 
    SeqComandos(comandos) 
    <FCHAVES> 
    <PONTOVIRG>
  ) | (
    <REPEAT>
    <ACHAVES>
    SeqComandos(comandos)
    <FCHAVES> 
    <UNTIL> 
    <APARENT> 
    exp = Expressao() 
    <FPARENT> 
    <PONTOVIRG>
  ) | (
    <RETURN> 
    exp = Expressao() 
    <PONTOVIRG>
  ) | (
    <SYSOUT> 
    <APARENT> 
    exp = Expressao() 
    <FPARENT> 
    <PONTOVIRG>
  )
}

// COMANDO' -> "(" LISTAEXP? ")" ";" | "=" COMANDO''
Comando ComandoLinha1(String id, ArrayList<Exp> lista_exp) : {} {
  (
    <APARENT> 
    (ListaExp(lista_exp))? 
    <FPARENT> 
    <PONTOVIRG>
    { return new IdListaExp(id, lista_exp); }
  ) | (
    <ATRIB> 
    ComandoLinha2(id)
  )
}

// COMANDO'' -> EXP ";" | "System.readint" "(" ")" ";"
Comando ComandoLinha2(String id) : {
  Expressao exp;
} {
   (
    exp = Expressao() 
    <PONTOVIRG>
    { return new AtribExp(id, exp); }
  ) | (
    <SYSREAD> 
    <APARENT> 
    <FPARENT> 
    <PONTOVIRG>
    { return new AtribRead(id); }
  )
}

// EXP -> "(" EXP OP EXP ")" | FATOR
Expressao Exp () : {
  Expressao exp1, exp2;
  Op op;
} {
  (
    <APARENT> 
    exp1 = Expressao() 
    op = Op() 
    exp2 = Expressao() 
    { return new Expressao(exp1, op, exp2); }
    <FPARENT>
  ) | (
    Fator()
  )
}

// FATOR -> TOKEN_id FATOR' | TOKEN_numliteral | "true" | "false
void Fator () : {
  Token id;
} {
  (
    id = <ID> 
    FatorLinha()
  ) |
  <NUM> | 
  <TRUE> | 
  <FALSE>
}

// FATOR' -> "(" LISTAEXP? ")" | vazio
void FatorLinha () : {} {
  (
    <APARENT> 
    (ListaExpressao())? 
    <FPARENT>
  )?
}

// OP -> "+" | "-" | "*" | "/" | "&" | "|" | "<" | ">" | "=="
Operador Op () : {
 Token op;
} {
  (
    op = <SOMA> | 
    op = <SUBTR> | 
    op = <MULT> | 
    op = <DIV> | 
    op = <AND> | 
    op = <OR> | 
    op = <MENORQUE> | 
    op = <MAIORQUE> | 
    op = <IGUAL>
  )
  { return new Operador(op.image); }
}

// LISTAEXP -> EXP LISTAEXP' 
void ListaExp (ArrayList<Exp> listaExp) : {
  Expressao exp;
} {
  exp = Expressao() 
  { listaExp.add(exp); }
  ListaExpLinha(listaExp)
}

// LISTAEXP' -> "," EXP LISTAEXP' | vazio
void ListaExpLinha (ArrayList<Exp> listaExp) : {
  Expressao exp;
} {
  (
    <VIRGULA> 
    exp = Expressao() 
    { listaExp.add(exp); }
    ListaExpLinha(listaExp)
  )?
}

// FUNC -> "func" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}" FUNC'
void Func () : {} {
  <FUNC> 
  Tipo() 
  <ID> 
  <APARENT> 
  (ListaArg())? 
  <FPARENT> 
  <ACHAVES> 
  VarDecl() 
  SeqComandos() 
  <FCHAVES> 
  FuncLinha()
}

// FUNC' -> "func" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}" FUNC' | vazio
void FuncLinha () : {
  Token id;
  Tipo tipo;
} {
  (
    <FUNC> 
    tipo = Tipo() 
    id = <ID> 
    <APARENT> 
    (ListaArg())? 
    <FPARENT> 
    <ACHAVES> 
    VarDecl() 
    SeqComandos() 
    <FCHAVES> 
    FuncLinha()
  )?
}

// LISTAARG -> TIPO TOKEN_id LISTAARG'
void ListaArg () : {
  ArrayList<Argumento> args;
} {
  Tipo() 
  <ID> 
  ListaArgLinha()
}

// LISTAARG' -> "," TIPO TOKEN_id LISTAARG' | vazio
void ListaArgLinha (ArrayList<Argumento> args) : {
  Token id;
} {
  (
    <VIRGULA> 
    Tipo() 
    id = <ID> 
    ListaArgLinha()
  )?
}
