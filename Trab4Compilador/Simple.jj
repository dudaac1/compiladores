
PARSER_BEGIN(Simple)
import java.io.*;
import java.util.ArrayList;

// cria a árvore sintática e reimprime o programa original ao percorrer a árvore sintática

// definição das classes que representam a árvore sintática

class SimpleArvore {
  ArrayList<Comando> comandos;

  SimpleArvore(ArrayList comandos) {
    this.comandos = comandos;
  }
}

class Comando {}

class Atrib extends Comando {
  String id;
  Exp exp;

  Atrib (String id, Exp exp) {
    this.id = id;
    this.exp = exp;
  }

  @Override
  public String toString() {
    return (id + " := " + exp + ";");
  }
}

class Print extends Comando {
  Exp exp;

  Print(Exp exp) {
    this.exp = exp;
  }

  @Override
  public String toString() {
    return "print(" + exp + ");";
  }
}

class Exp { }

class Num extends Exp {
  int num;

  Num(int num) { 
    this.num = num;
  }

  @Override
  public String toString() {
    return String.valueOf(num);
  }

}

class Var extends Exp {
  String var;

  Var(String var) {
    this.var = var;
  }

  @Override
  public String toString() {
    return var;
  }
}

public class Simple {

  public static void main(String args[]) throws ParseException, IOException {
    Simple parser = new Simple(new FileInputStream(args[0]));
    SimpleArvore arvore = parser.Simple();
    print(arvore);
  }

  public static void print(SimpleArvore arv) {
    System.out.println("main() {");
    for (Comando c : arv.comandos) 
      System.out.println("\t" + c.toString());
    System.out.println("}");
  }

  public static String stringExp(Exp e) {
    if (e instanceof Num)
      return (((Num)e).num + "");
    else 
      return (((Var)e).var);
  }

}

PARSER_END(Simple)

SKIP :
{
    " "
  | "\t"
  | "\n"
  | "\r"
}

TOKEN :
{
    <MAIN: "main">
  | <ACHAVES: "{">
  | <FCHAVES: "}">
  | <APARENTESES:"(">
  | <FPARENTESES:")">
  | <PRINT: "print">
  | <ATRIB: ":=">
  | <PV: ";">
}

TOKEN :
{
  <NUM : (["0"-"9"])+>
 | <ID: ["a"-"z","A"-"Z"] (["a"-"z","A"-"Z","0"-"9"])*>
}

// modificação na gramática para construir a árvore sintática:

// REGRA: SIMPLE -> "main" "{" COMANDOS  "}"
SimpleArvore Simple () :
{ ArrayList comandos = new ArrayList(); }  // declaração de variáveis locais
{
  <MAIN> 
  <ACHAVES> 
  Comandos(comandos) 
  <FCHAVES>
  <EOF> 
  { return new SimpleArvore(comandos); }
}

// REGRA: COMANDOS -> COM ";"  COMANDOS'
void Comandos (ArrayList comandos) :
{ Comando com; } {
  // ação semantica ou código java entre chaves!
  com = Com() 
  { comandos.add(com); } 
  <PV> 
  ComandosLinha(comandos)
}

// REGRA: COMANDOS'->   COM ";" COMANDOS' | epsilon
void ComandosLinha (ArrayList comandos) :
{ Comando com; } {
  ( 
    com = Com()  
    {comandos.add(com);} 
    <PV> 
    ComandosLinha(comandos)
  )?
}

// REGRA: COM -> id ":=" EXP | "print" "(" EXP ")"
Comando Com () :
{
  Token id = null; 
  Exp e = null; 
  Comando c = null; 
  Comando result = null;
} {
  (
    (
      id = <ID> 
      <ATRIB> 
      e = Exp() 
      {result = new Atrib(id.image, e);}
    ) 
    | 
    (
      <PRINT> 
      <APARENTESES> 
      e = Exp() 
      <FPARENTESES> 
      { result = new Print(e); }
    )
  )
  
  { return result; } 
}

// REGRA: EXP -> num | id
Exp Exp () :
{
  Token t = null; 
  Exp result = null;
} {
  ( 
    (
      t = <NUM> 
      {result = new Num(Integer.parseInt(t.image));}
    ) 
    |
    (
      t = <ID> {result = new Var(t.image);}
    )
  )

  { return result; }

}