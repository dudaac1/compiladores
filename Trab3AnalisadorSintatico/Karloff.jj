PARSER_BEGIN(Karloff)
import java.io.*;
public class Karloff {

  public static void main(String args[]) throws ParseException,IOException {
    
 Karloff analisador = new Karloff(new FileInputStream(args[0]));
 analisador.Karloff();
  }

}

PARSER_END(Karloff)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <VOID: "void">
| <FUNC: "func">
| <IF: "if">
| <THEN: "then">
| <REPEAT: "repeat">
| <UNTIL: "until">
| <WHILE: "while">
| <RETURN: "return">

| <SYSOUT: "System.output">
| <SYSREAD: "System.readint">

| <NEWVAR: "newVar">
| <INT: "integer">
| <BOOL: "bool">
| <TRUE: "true">
| <FALSE: "false">

| <ACHAVES: "{">
| <FCHAVES: "}">
| <APARENT: "(">
| <FPARENT: ")">
| <PONTOVIRG: ";">
| <VIRGULA: ",">

| <ATRIB: "=">

| <SOMA: "+">
| <SUBTR: "-">
| <MULT: "*">
| <DIV: "/">
| <AND: "&">
| <OR: "|">
| <MENORQUE: "<">
| <MAIORQUE: ">">
| <IGUAL: "==">

}

TOKEN :
{
  <NUM : (["0"-"9"])+ ((["."]) (["0"-"9"])+)? (["E"] (["+", "-"])? (["0"-"9"])+)?>
| <ID: ["a"-"z","A"-"Z"] (["a"-"z","A"-"Z","0"-"9"])* (["_"] (["a"-"z", "A"-"Z","0"-"9"])+)*>

}

//KARLOFF -> MAIN FUNC?
void Karloff () : {} {
  Main() (Func())?
  <EOF>
}

//MAIN -> "void" "main" "(" ")" "{" VARDECL SEQCOMANDOS "}"
void Main () : {} {
  <VOID> <MAIN> <APARENT> <FPARENT> <ACHAVES> VarDecl() SeqComandos() <FCHAVES>
}

//VARDECL -> "newVar" TIPO TOKEN_id ";" VARDECL | vazio
void VarDecl () : {} {
  (<NEWVAR> Tipo() <ID> <PONTOVIRG> VarDecl())?
}

//TIPO -> "integer" | "bool"
void Tipo () : {} {
  <INT> | <BOOL>
}

//SEQCOMANDOS -> COMANDO SEQCOMANDOS | vazio
void SeqComandos () : {} {
  (Comando() SeqComandos())?
}

//COMANDO -> TOKEN_id COMANDO'
//    | "if" "(" EXP ")" "then" "{" SEQCOMANDOS "}" ";"
//    | "while" "(" EXP ")" "{" SEQCOMANDOS "}" ";"
//    | "repeat" "{" SEQCOMANDOS "}" "until" "(" EXP ")" ";"
//    | "return" EXP ";" 
//    | "System.output" "(" EXP ")" ";"
//COMANDO' -> "(" LISTAEXP? ")" ";" | "=" COMANDO''
//COMANDO'' -> EXP ";" | "System.readint" "(" ")" ";"
void Comando () : {} {
    (<ID> ComandoLinha1())
  | (<IF> <APARENT> Exp() <FPARENT> <THEN> <ACHAVES> SeqComandos() <FCHAVES> <PONTOVIRG>)
  | (<WHILE> <APARENT> Exp() <FPARENT> <ACHAVES> SeqComandos() <FCHAVES> <PONTOVIRG>)
  | (<REPEAT> <ACHAVES> SeqComandos() <FCHAVES> <UNTIL> <APARENT> Exp() <FPARENT> <PONTOVIRG>)
  | (<RETURN> Exp() <PONTOVIRG>)
  | (<SYSOUT> <APARENT> Exp() <FPARENT> <PONTOVIRG>)
}

void ComandoLinha1() : {} {
  (<APARENT> (ListaExp())? <FPARENT> <PONTOVIRG>) | <ATRIB> ComandoLinha2()
}

void ComandoLinha2() : {} {
   (Exp() <PONTOVIRG>) | (<SYSREAD> <APARENT> <FPARENT> <PONTOVIRG>)
}

//EXP -> "(" EXP OP EXP ")" | FATOR
void Exp () : {} {
  (<APARENT> Exp() Op() Exp() <FPARENT>) | Fator()
}

//FATOR -> TOKEN_id FATOR' | TOKEN_numliteral | "true" | "false
//FATOR' -> "(" LISTAEXP? ")" | vazio
void Fator () : {} {
  (<ID> FatorLinha()) | <NUM> | <TRUE> | <FALSE>
}
void FatorLinha () : {} {
  (<APARENT> (ListaExp())? <FPARENT>)?
}

//OP -> "+" | "-" | "*" | "/" | "&" | "|" | "<" | ">" | "=="
void Op () : {} {
  <SOMA> | <SUBTR> | <MULT> | <DIV> | <AND> | <OR> | <MENORQUE> | <MAIORQUE> | <IGUAL>
}

//LISTAEXP -> EXP LISTAEXP' 
//LISTAEXP' -> "," EXP LISTAEXP' | vazio
void ListaExp () : {} {
  Exp() ListaExpLinha()
}

void ListaExpLinha () : {} {
  (<VIRGULA> Exp() ListaExpLinha())?
}

//FUNC -> "func" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}" FUNC'
//FUNC' -> "func" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}" FUNC' | vazio
void Func () : {} {
  <FUNC> Tipo() <ID> <APARENT> (ListaArg())? <FPARENT> <ACHAVES> VarDecl() SeqComandos() <FCHAVES> FuncLinha()
}

void FuncLinha () : {} {
  (<FUNC> Tipo() <ID> <APARENT> (ListaArg())? <FPARENT> <ACHAVES> VarDecl() SeqComandos() <FCHAVES> FuncLinha())?
}

//LISTAARG -> TIPO TOKEN_id LISTAARG'
// LISTAARG' -> "," TIPO TOKEN_id LISTAARG' | vazio
void ListaArg () : {} {
  Tipo() <ID> ListaArgLinha()
}

void ListaArgLinha () : {} {
  (<VIRGULA> Tipo() <ID> ListaArgLinha())?
}
